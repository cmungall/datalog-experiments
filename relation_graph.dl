/**
 relation_graph / owlstar inference
*/
#include "includes/prefixes.dl"

//.type owlClassExpression <: symbol
//.type owlPropertyExpression <: symbol

.decl rdf(s:symbol, p:symbol, o:symbol)
.input rdf

// test harness
.decl expected(s:symbol, p:symbol, o:symbol)
.input expected

.decl fail(s:symbol, p:symbol, o:symbol)
.output fail
.decl pass(s:symbol, p:symbol, o:symbol)
.output pass

fail(s,p,o) :- expected(s,p,o), ! edge(s,p,o).
pass(s,p,o) :- expected(s,p,o), edge(s,p,o).

.decl test_summary(n_pass:number, n_fail:number)
.output test_summary
test_summary(n_pass, n_fail) :-
        n_pass = count:{pass(_,_,_)},
        n_fail = count:{fail(_,_,_)}.

// relation graph edge: subClassOf between named classes OR C sub R some D OR an ObjectPropertyAssertion OR a type assertion
.decl edge(s:symbol, p:symbol, o:symbol)
.output edge

.decl chain(p:symbol, p1:symbol, p2:symbol)
.decl transitive(p:symbol)
.decl subClassOf(s:symbol, o:symbol)
.decl subPropertyOf(s:symbol, o:symbol)
.decl subPropertyOf_tr(s:symbol, o:symbol)
.decl owl_class(s: symbol)
.decl owl_named_individual(s: symbol)
.decl owl_named_entity(s: symbol)

/**

RDF to OWL mapping

*/

owl_class(x) :- rdf(x, RDF_TYPE, OWL_CLASS).
//owl_class(x) :- rdf(x, RDFS_SUBCLASS_OF, _).
//owl_class(x) :- rdf(_, RDFS_SUBCLASS_OF, x).
owl_named_individual(x) :- rdf(x, RDF_TYPE, OWL_NAMED_INDIVIDUAL).
owl_named_entity(x) :- owl_class(x) ; owl_named_individual(x).

// convenience predicate
transitive(p) :- rdf(p, RDF_TYPE, OWL_TRANSITIVE_PROPERTY).
transitive(RDFS_SUBCLASS_OF).

// convenience predicate for asserted subclass
subClassOf(s,o) :- rdf(s,RDFS_SUBCLASS_OF,o).

// convenience predicate for asserted subproperty
subPropertyOf(s,o) :- rdf(s,RDFS_SUBPROPERTY_OF,o).

// transitive subpropertyOf
subPropertyOf_tr(s,o) :- subPropertyOf(s,o).
subPropertyOf_tr(s,o) :- subPropertyOf(s,z), subPropertyOf_tr(z,o).
//.output subPropertyOf_tr

// property chains (currently only length 2 supported)
chain(p, p1, p2) :-
  rdf(p,OWL_PROPERTY_CHAIN_AXIOM,list),
  rdf(list, RDF_FIRST, p1),
  rdf(list, RDF_REST, list2),
  rdf(list2, RDF_FIRST, p2),
  rdf(list2, RDF_REST, RDF_NIL).
chain(p, p, p) :- transitive(p).
.output chain

/** OWLStar direct edges

*/


// base case (do all edges for now, but we can restrict to classes)
edge(s, p, o) :- rdf(s, p, o), owl_named_entity(s), owl_named_entity(o).

// materialize s subClassOf p some o ==> edges
edge(s, p, o) :- subClassOf(s, restr),
        rdf(restr,OWL_ON_PROPERTY, p),
        rdf(restr,OWL_SOME_VALUES_FROM, o).

/** OWLStar inference

*/
// subProperty edge inference
edge(s, p, o) :- edge(s, p1, o), subPropertyOf_tr(p1,p).

// property chain inference (including transitivity)
edge(s, p, o) :- rdf(s, p1, z), edge(z, p2, o), chain(p, p1, p2).

// someValuesFrom propagates over subclass on either side
edge(s, p, o) :- edge(s,RDFS_SUBCLASS_OF,s1),edge(s1,p,o1),edge(o1,RDFS_SUBCLASS_OF,o).

// reflexivity of subclassOf
edge(s, RDFS_SUBCLASS_OF, s) :- rdf(s, RDF_TYPE, OWL_CLASS).

