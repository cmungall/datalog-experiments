/**

RDF to OWL mapping

Status: PARTIAL implementation

*/

#include "src/prefixes.dl"
#include "src/owl_declarations.dl"


.decl rdf(s:symbol, p:symbol, o:symbol)
.input rdf


.decl subPropertyOf_tr(s:symbol, o:symbol)




owl_class(x) :- rdf(x, RDF_TYPE, OWL_CLASS).
//owl_class(x) :- rdf(x, RDFS_SUBCLASS_OF, _).
//owl_class(x) :- rdf(_, RDFS_SUBCLASS_OF, x).
owl_named_individual(x) :- rdf(x, RDF_TYPE, OWL_NAMED_INDIVIDUAL).
owl_named_entity(x) :- owl_class(x) ; owl_named_individual(x).
owl_object_property(x) :- rdf(x, RDF_TYPE, OWL_OBJECT_PROPERTY).

// convenience predicate
transitive(p) :- rdf(p, RDF_TYPE, OWL_TRANSITIVE_PROPERTY).
transitive(RDFS_SUBCLASS_OF).

// convenience predicate for asserted subclass
subClassOf(s,o) :- rdf(s,RDFS_SUBCLASS_OF,o).
.output subClassOf

// convenience predicate for asserted subclass
equivalentClass(s,o) :- rdf(s,OWL_EQUIVALENT_CLASS,o).

// convenience predicate for asserted subproperty
subPropertyOf(s,o) :- rdf(s,RDFS_SUBPROPERTY_OF,o).

// transitive subpropertyOf
subPropertyOf_tr(s,o) :- subPropertyOf(s,o).
subPropertyOf_tr(s,o) :- subPropertyOf(s,z), subPropertyOf_tr(z,o).
//.output subPropertyOf_tr

// property chains (currently only length 2 supported)
chain(p, p1, p2) :-
    rdf(p,OWL_PROPERTY_CHAIN_AXIOM,list),
    rdf(list, RDF_FIRST, p1),
    rdf(list, RDF_REST, list2),
    rdf(list2, RDF_FIRST, p2),
    rdf(list2, RDF_REST, RDF_NIL).
chain(p, p, p) :- transitive(p).
.output chain

someValuesFrom(restr,p,v) :-
    rdf(restr,OWL_ON_PROPERTY, p),
    rdf(restr,OWL_SOME_VALUES_FROM, v).

// noop
intersectionOf1(r, x1) :-
    rdf(r,OWL_INTERSECTION_OF,list),
    rdf(list, RDF_FIRST, x1),
    rdf(list, RDF_REST, RDF_NIL).
.output intersectionOf1

intersectionOf2(r, x1, x2) :-
    rdf(r,OWL_INTERSECTION_OF,list),
    rdf(list, RDF_FIRST, x1),
    rdf(list, RDF_REST, list2),
    rdf(list2, RDF_FIRST, x2),
    rdf(list2, RDF_REST, RDF_NIL).
.output intersectionOf2

intersectionOf3(r, x1, x2, x3) :-
    rdf(r,OWL_INTERSECTION_OF,list),
    rdf(list, RDF_FIRST, x1),
    rdf(list, RDF_REST, list2),
    rdf(list2, RDF_FIRST, x2),
    rdf(list2, RDF_REST, list3),
    rdf(list3, RDF_FIRST, x3),
    rdf(list3, RDF_REST, RDF_NIL).
.output intersectionOf2

intersectionOf_member(r, x) :-
    rdf(r,OWL_INTERSECTION_OF,list),
    rdflist_member(list, x).
.output intersectionOf_member

.decl rdflist_member(list:symbol, x:symbol)
rdflist_member(list, x) :-
    rdf(list, RDF_FIRST, x).
rdflist_member(list, x) :-
    rdf(list, RDF_REST, list2),
    rdflist_member(list2, x).


